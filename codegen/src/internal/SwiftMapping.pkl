// ===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ===----------------------------------------------------------------------===//
@Unlisted
abstract module pkl.swift.internal.SwiftMapping

import "SwiftMapping.pkl"
import "Type.pkl"
import "pkl:reflect"
import "utils.pkl"

/// The Swift module name, e.g. `AppConfig`
///
/// This determines whether imports need to be generated or not.
swiftModuleName: String?

/// The name for the namespace (generated as an enum)
fixed namespaceName: String =
  utils.getSwiftNameAnnotation(source.enclosingDeclaration)
    ?? utils.normalizeName(source.enclosingDeclaration.name.replaceAll(".", "_"))

/// The exposed simple name of this type (either the enum's name or the struct or protocol name).
name: String

/// All names exposed by this mapping
///
/// For example, if there is both a protocol and a struct implementation, this includes both names.
names: List<String>

seenMappings: List<SwiftMapping>

/// The source for this mapping
source: reflect.TypeDeclaration

/// The exposed Swift type.
type: Type

/// The set of names already seen prior to creating mappings for this module.
existingNames: List<String> = seenMappings.flatMap((it) ->
  if (it.swiftModuleName == module.swiftModuleName) it.names
  else List()
)

class TypeAlias extends SwiftMapping {
  local self = this

  alias: reflect.TypeAlias = self.source as reflect.TypeAlias

  name = utils.toSwiftName(self.source)

  names = List(name)

  type = new Type.Declared {
    typeName = name
    namespaceName = self.namespaceName
    swiftModuleName = self.swiftModuleName
  }
}

class Enum extends SwiftMapping {
  local self = this

  local union: reflect.UnionType = alias.referent as reflect.UnionType

  alias: reflect.TypeAlias = self.source as reflect.TypeAlias

  name = utils.toSwiftName(self.source)

  names = List(name)

  type = new Type.Declared {
    typeName = name
    namespaceName = self.namespaceName
    swiftModuleName = self.swiftModuleName
  }
//
//   /// The member constituents of this enum
//   members: List<EnumMember> =
//     union.members
//       .filter((it) -> !(it is reflect.NothingType))
//       .fold(List(), (acc: List<EnumMember>, mem) ->
//         acc.add(new EnumMember {
//           pklName = (mem as reflect.StringLiteralType).value
//           swiftName = utils.normalizeEnumName(pklName)
//         })
//       )
}

class Class extends SwiftMapping {
  local self = this

  clazz: reflect.Class = self.source as reflect.Class

  names = List(protocol?.name, struct?.name).filterNonNull() as List<String>

  type = (protocol ?? struct).type

  name = utils.toSwiftName(clazz)

  protocol: Protocol? =
    if (clazz.modifiers.contains("abstract") || clazz.modifiers.contains("open"))
      new Protocol {
        name = self.name
        fullName = "\(self.namespaceName)_\(self.name)"
        type = new Type.Declared {
          namespaceName = self.namespaceName
          swiftModuleName = self.swiftModuleName
          typeName = self.name
          isPolymorphic = true
        }
      }
    else null

  struct: Struct? =
    if (clazz.modifiers.contains("abstract")) null
    else
      let (structName =  if (protocol == null) name else "\(name)Impl")
        new Struct {
          name = structName
          clazz = self.clazz
          type = new Type.Declared {
            namespaceName = self.namespaceName
            swiftModuleName = self.swiftModuleName
            typeName = structName
          }
        }
}
//
// class EnumMember {
//   pklName: String
//   swiftName: String
// }

class Protocol {
  name: String
  fullName: String
  type: Type
}

class Struct {
  name: String
  clazz: reflect.Class
  type: Type
}
