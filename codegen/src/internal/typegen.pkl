// ===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ===----------------------------------------------------------------------===//
/// Utilities for generating Swift types from Pkl.
@Unlisted
module pkl.swift.internal.typegen

import "pkl:reflect"
import "Type.pkl"
import "SwiftMapping.pkl"

function generateType(
  type: reflect.Type,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<SwiftMapping>
): Type =
  if (type is reflect.DeclaredType)
    generateDeclaredType(type, enclosing, seenMappings)
  else if (type is reflect.ModuleType)
    let (moduleClass = enclosing.enclosingDeclaration.moduleClass)
      generateType(reflect.DeclaredType(moduleClass), moduleClass, seenMappings)
  else if (type is reflect.UnionType) generateUnionType(type, seenMappings)
  else if (type is reflect.NullableType)
    let (_elem = generateType(type.member, enclosing, seenMappings))
      // No doubly-nullable type
      if (_elem is Type.Nullable) _elem
      else new Type.Nullable { elem = _elem }
  else if (type is reflect.UnknownType) anyType
  else if (type is reflect.NothingType) neverType
  else if (type is reflect.StringLiteralType) new Type.Declared { typeName = "String" }
  else throw("Unsure how to generate this type: \(type)")

function generateUnionType(
  type: reflect.UnionType,
  seenMappings: List<SwiftMapping>
): Type =
  let (mappedType = seenMappings.findOrNull((c) -> c.source == type))
    if (mappedType != null)
      mappedType.type
    else if (type.members.every((it) -> it is reflect.StringLiteralType || it == reflect.stringType))
      new Type.Declared { typeName = "String" }
    else
      anyType

function generateDeclaredType(
  type: reflect.DeclaredType,
  enclosing: reflect.TypeDeclaration,
  seenMappings: List<SwiftMapping>
): Type =
  let (referent = type.referent)
  let (reflectee = type.referent.reflectee)
  let (mapped = seenMappings.findOrNull((it) -> it.source == referent))
    mapped?.type ??
      mappedTypes.getOrNull(reflectee) ??
        mappedHigherOrderTypes.getOrNull(reflectee)?.apply(type, enclosing, seenMappings) ??
          if (referent is reflect.TypeAlias)
            generateType(referent.referent, enclosing, seenMappings)
          else throw("Cannot generate type \(type.referent.name) as Swift.")

local function builtInType(typ: String): Type.Declared = new { typeName = typ }

anyType: Type.Nullable = new { elem = builtInType("AnyHashable") }

local neverType: Type.Declared = builtInType("Never")

mappedTypes: Mapping<Class|TypeAlias, Type> = new {
  [Int] = new Type.Declared { typeName = "Int" }
  [Int8] = new Type.Declared { typeName = "Int8" }
  [Int16] = new Type.Declared { typeName = "Int16" }
  [Int32] = new Type.Declared { typeName = "Int32" }
  [UInt] = new Type.Declared { typeName = "UInt" }
  [UInt8] = new Type.Declared { typeName = "UInt8" }
  [UInt16] = new Type.Declared { typeName = "UInt16" }
  [UInt32] = new Type.Declared { typeName = "UInt32" }
  [Number] = new Type.Declared { typeName = "Float64" }
  [Float] = new Type.Declared { typeName = "Float64" }
  [String] = new Type.Declared { typeName = "String" }
  [Boolean] = new Type.Declared { typeName = "Bool" }
  [Null] = new Type.Declared { typeName = "Optional"; typeArguments = List(neverType) }
  [Any] = anyType
  [Char] = new Type.Declared { typeName = "Character" }
  [Duration] = new Type.Declared {
    swiftModuleName = "PklSwift"
    typeName = "Duration"
  }
  [DurationUnit] = new Type.Declared {
    swiftModuleName = "PklSwift"
    typeName = "DurationUnit"
  }
  [Dynamic] = new Type.Declared {
    swiftModuleName = "PklSwift"
    typeName = "Object"
  }
  [DataSize] = new Type.Declared {
    swiftModuleName = "PklSwift"
    typeName = "DataSize"
  }
  [DataSizeUnit] = new Type.Declared {
    swiftModuleName = "PklSwift"
    typeName = "DataSizeUnit"
  }
}

mappedHigherOrderTypes: Mapping<Class|TypeAlias, (reflect.DeclaredType, reflect.TypeDeclaration, List<SwiftMapping>) -> Type> = new {
  [List] = this[Listing]
  [Listing] = (type, enclosing, seenMappings) ->
      let (typeArg = type.typeArguments.getOrNull(0))
        new Type.Array {
          elem =
            if (typeArg == null) anyType
            else generateType(typeArg, enclosing, seenMappings)
        }
  [Map] = this[Mapping]
  [Mapping] = (type, enclosing, seenMappings) -> new Type.Dictionary {
    local typeArgKey = type.typeArguments.getOrNull(0)
    key =
      if (typeArgKey == null) anyType
      else generateType(typeArgKey, enclosing, seenMappings)

    local typeArgValue = type.typeArguments.getOrNull(1)
    elem =
      if (typeArgValue == null) anyType
      else generateType(typeArgValue, enclosing, seenMappings)
  }
  [Set] = (type, enclosing, seenMappings) -> new Type.Declared {
        local typeArg = type.typeArguments.getOrNull(0)
        typeName = "Set"
        typeArguments = List(
          if (typeArg == null)
            anyType
          else
            generateType(typeArg, enclosing, seenMappings)
        )
      }
  [Pair] = (type, enclosing, seenMappings) -> new Type.Declared {
    typeName = "Pair"
    swiftModuleName = "Pkl"
    local typeArgKey = type.typeArguments.getOrNull(0)
    local typeArgValue = type.typeArguments.getOrNull(1)
    typeArguments = List(
      if (typeArgKey == null) anyType else generateType(typeArgKey, enclosing, seenMappings),
      if (typeArgValue == null) anyType else generateType(typeArgValue, enclosing, seenMappings)
    )
  }
}

